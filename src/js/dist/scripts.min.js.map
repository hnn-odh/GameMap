{"version":3,"sources":["scripts.js"],"names":["require","THREE","_interopRequireWildcard","_OrbitControls","dat","_EffectComposer","_RenderPass","_UnrealBloomPass","_GLTFLoader","_DRACOLoader","raycaster","Raycaster","mouse","Vector2","loader","TextureLoader","height","load","texture","alpha","gui","GUI","document","planeGeometry","PlaneGeometry","canvas","querySelector","color","scene","displacementMap","displacementScale","alphaMap","depthTest","transparent","Mesh","planeMaterial","x","plane","rotation","z","position","y","receiveShadow","pointLight","PointLight","castShadow","add","window","innerHeight","addEventListener","sizes","width","innerWidth","camera","updateProjectionMatrix","renderer","setPixelRatio","Math","min","devicePixelRatio","PerspectiveCamera","controls","enableDamping","maxPolarAngle","PI","maxDistance","WebGLRenderer","setSize","dLoader","model","setDecoderConfig","DRACOLoader","setDecoderPath","gloader","setDRACOLoader","glb","dispatchEvent","scale","set","CustomEvent","render","Clock","requestAnimationFrame","clock","getElapsedTime","tick","sphereGeometry","SphereGeometry","sphereMaterial","LineBasicMaterial","sphere","addColor","background","Color","edges","EdgesGeometry","lineSegments","LineSegments","fog","FogExp2"],"mappings":"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","file":"scripts.min.js","sourcesContent":["import '../css/style.css';\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport * as dat from 'dat.gui'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader';\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n//load texture\n\nconst loader = new THREE.TextureLoader();\nconst height = loader.load('./assets/Displacement_small.jpg');\nconst texture = loader.load('./assets/Combine.png');\nconst alpha = loader.load('./assets/alpha2.jpg');\n\n\n\n// Debug\nconst gui = new dat.GUI()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n// Objects\n/* const geometry = new THREE.TorusGeometry( .7, .2, 16, 100 ); */\nconst planeGeometry = new THREE.PlaneGeometry(10,10,64,64);\n\n// Materials\nconst planeMaterial = new THREE.MeshStandardMaterial({\n    color: 'white',\n    map: texture,\n    displacementMap:height,\n    displacementScale:2,\n    alphaMap:alpha,\n    transparent:true,\n    depthTest:false,\n    \n});\n/* const material = new THREE.MeshBasicMaterial()\nmaterial.color = new THREE.Color(0xff0000) */\n\n// Mesh\nconst plane = new THREE.Mesh(planeGeometry,planeMaterial);\nplane.rotation.x=4.71239;\nplane.rotation.z=4.71239;\nplane.position.y=-0.5;\nplane.receiveShadow = true; \n//scene.add(plane);\n\n/* const sphere = new THREE.Mesh(geometry,material)\nscene.add(sphere)\n */\n// Lights\n\nconst pointLight = new THREE.PointLight(0xffffff, 8)\npointLight.position.x = 0\npointLight.position.y = 2\npointLight.position.z = 1\npointLight.castShadow=true\nscene.add(pointLight)\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n\n\n/* // Load and set the environment map (cubemap)\nconst cubeTextureLoader = new THREE.CubeTextureLoader();\nconst environmentMap = cubeTextureLoader.load([\n    './assets/pos-x.jpg', './assets/neg-x.jpg',\n    './assets/pos-y.jpg', './assets/neg-y.jpg',\n    './assets/pos-z.jpg', './assets/neg-z.jpg'\n]);\nscene.background = environmentMap; // Set as background (optional) */\n\n// Load equirectangular image and set as environment map\n/* const textureLoader = new THREE.TextureLoader();\ntextureLoader.load('./assets/env (2).jpg', function(texture) {\n    texture.mapping = THREE.EquirectangularReflectionMapping;\n    scene.background = texture; // Set as background (optional)\n    scene.environment = texture; // Set as environment map\n});\n */\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 2\ncamera.position.y = 1.2\ncamera.position.z = 2\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n//controls.enableZoom=false\ncontrols.enablePan=false\ncontrols.maxPolarAngle = Math.PI / 2; // Change this value as needed\n\ncontrols.maxDistance=2\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n\n///add model\n\nconst gloader = new GLTFLoader();\nconst dLoader = new DRACOLoader();\ndLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\ndLoader.setDecoderConfig({type: 'js'});\ngloader.setDRACOLoader(dLoader);\n\n\nlet model;\n\ngloader.load('./assets/map.glb', function(glb) {\n    model = glb.scene;\n     model.scale.set(0.009, 0.009, 0.009);\n    model.position.y=-1\n    scene.add(model);\n    document.dispatchEvent(new CustomEvent('modelLoaded'));\n});\n\n\ndocument.addEventListener('modelLoaded', () => {\n    \n});\n\n/**\n * Animate\n */\n\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update objects\n   // sphere.rotation.y = .5 * elapsedTime\n\n    // Update Orbital Controls\n    // controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n\n\n\n// Sets a 12 by 12 gird helper\nconst gridHelper = new THREE.GridHelper(12, 12);\n//scene.add(gridHelper);\n\n// Sets the x, y, and z axes with each having a length of 4\nconst axesHelper = new THREE.AxesHelper(4);\n\n//scene.add(axesHelper);\n\n//GUI\n\ngui.add(plane.rotation,'x').min(0).max(7);\ngui.add(camera.position,'x')\ngui.add(camera.position,'y')\ngui.add(camera.position,'z')\n\n\ngui.add(pointLight.position,'x');\ngui.add(pointLight.position,'y');\ngui.add(pointLight.position,'z');\ngui.addColor(pointLight,'color');\n\n\n\n//environment\nscene.background = new THREE.Color(0x000621);\n\n\n// Create a geometry for the upper half of the sphere\n//const sphereGeometry = new THREE.SphereGeometry(20, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2); // Upper half\nconst sphereGeometry = new THREE.SphereGeometry(3, 32,32)\nconst edges = new THREE.EdgesGeometry(sphereGeometry); // Get edges\n\n// Create a line material\nconst sphereMaterial = new THREE.LineBasicMaterial({ color: 0x213280 });\n\n// Create line segments and add them to the scene\nconst lineSegments = new THREE.LineSegments(edges, sphereMaterial);\nscene.add(lineSegments); \nconst sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n//scene.add(sphere);\n// Adding Fog (choose one of the two methods)\n//scene.fog = new THREE.Fog(0x0000ff, 1, 10); // Linear Fog\n scene.fog = new THREE.FogExp2(0x0000ff, 0.2); // Exponential Fog\n"]}