{"version":3,"sources":["scripts.js"],"names":["raycaster","THREE","Raycaster","mouse","Vector2","loader","TextureLoader","height","load","texture","alpha","gui","dat","GUI","canvas","document","querySelector","scene","Scene","planeGeometry","PlaneGeometry","planeMaterial","MeshStandardMaterial","color","map","displacementMap","displacementScale","alphaMap","transparent","depthTest","plane","Mesh","rotation","x","z","position","y","receiveShadow","pointLight","PointLight","castShadow","add","sizes","width","window","innerWidth","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","PerspectiveCamera","controls","OrbitControls","enableDamping","enablePan","maxPolarAngle","PI","maxDistance","WebGLRenderer","gloader","GLTFLoader","dLoader","DRACOLoader","setDecoderPath","setDecoderConfig","type","setDRACOLoader","model","glb","scale","set","dispatchEvent","CustomEvent","clock","Clock","tick","elapsedTime","getElapsedTime","render","requestAnimationFrame","gridHelper","GridHelper","axesHelper","AxesHelper","max","addColor","background","Color","sphereGeometry","SphereGeometry","edges","EdgesGeometry","sphereMaterial","LineBasicMaterial","lineSegments","LineSegments","sphere","fog","FogExp2"],"mappings":"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","sourcesContent":["import '../css/style.css';\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport * as dat from 'dat.gui'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader';\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n//load texture\n\nconst loader = new THREE.TextureLoader();\nconst height = loader.load('./assets/Displacement_small.jpg');\nconst texture = loader.load('./assets/Combine.png');\nconst alpha = loader.load('./assets/alpha2.jpg');\n\n\n\n// Debug\nconst gui = new dat.GUI()\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n// Objects\n/* const geometry = new THREE.TorusGeometry( .7, .2, 16, 100 ); */\nconst planeGeometry = new THREE.PlaneGeometry(10,10,64,64);\n\n// Materials\nconst planeMaterial = new THREE.MeshStandardMaterial({\n    color: 'white',\n    map: texture,\n    displacementMap:height,\n    displacementScale:2,\n    alphaMap:alpha,\n    transparent:true,\n    depthTest:false,\n    \n});\n/* const material = new THREE.MeshBasicMaterial()\nmaterial.color = new THREE.Color(0xff0000) */\n\n// Mesh\nconst plane = new THREE.Mesh(planeGeometry,planeMaterial);\nplane.rotation.x=4.71239;\nplane.rotation.z=4.71239;\nplane.position.y=-0.5;\nplane.receiveShadow = true; \n//scene.add(plane);\n\n/* const sphere = new THREE.Mesh(geometry,material)\nscene.add(sphere)\n */\n// Lights\n\nconst pointLight = new THREE.PointLight(0xffffff, 8)\npointLight.position.x = 0\npointLight.position.y = 2\npointLight.position.z = 1\npointLight.castShadow=true\nscene.add(pointLight)\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n\n\n/* // Load and set the environment map (cubemap)\nconst cubeTextureLoader = new THREE.CubeTextureLoader();\nconst environmentMap = cubeTextureLoader.load([\n    './assets/pos-x.jpg', './assets/neg-x.jpg',\n    './assets/pos-y.jpg', './assets/neg-y.jpg',\n    './assets/pos-z.jpg', './assets/neg-z.jpg'\n]);\nscene.background = environmentMap; // Set as background (optional) */\n\n// Load equirectangular image and set as environment map\n/* const textureLoader = new THREE.TextureLoader();\ntextureLoader.load('./assets/env (2).jpg', function(texture) {\n    texture.mapping = THREE.EquirectangularReflectionMapping;\n    scene.background = texture; // Set as background (optional)\n    scene.environment = texture; // Set as environment map\n});\n */\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 2\ncamera.position.y = 1.2\ncamera.position.z = 2\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n//controls.enableZoom=false\ncontrols.enablePan=false\ncontrols.maxPolarAngle = Math.PI / 2; // Change this value as needed\n\ncontrols.maxDistance=2\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n\n///add model\n\nconst gloader = new GLTFLoader();\nconst dLoader = new DRACOLoader();\ndLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\ndLoader.setDecoderConfig({type: 'js'});\ngloader.setDRACOLoader(dLoader);\n\n\nlet model;\n\ngloader.load('./assets/map.glb', function(glb) {\n    model = glb.scene;\n     model.scale.set(0.009, 0.009, 0.009);\n    model.position.y=-1\n    scene.add(model);\n    document.dispatchEvent(new CustomEvent('modelLoaded'));\n});\n\n\ndocument.addEventListener('modelLoaded', () => {\n    \n});\n\n/**\n * Animate\n */\n\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update objects\n   // sphere.rotation.y = .5 * elapsedTime\n\n    // Update Orbital Controls\n    // controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n\n\n\n// Sets a 12 by 12 gird helper\nconst gridHelper = new THREE.GridHelper(12, 12);\n//scene.add(gridHelper);\n\n// Sets the x, y, and z axes with each having a length of 4\nconst axesHelper = new THREE.AxesHelper(4);\n\n//scene.add(axesHelper);\n\n//GUI\n\ngui.add(plane.rotation,'x').min(0).max(7);\ngui.add(camera.position,'x')\ngui.add(camera.position,'y')\ngui.add(camera.position,'z')\n\n\ngui.add(pointLight.position,'x');\ngui.add(pointLight.position,'y');\ngui.add(pointLight.position,'z');\ngui.addColor(pointLight,'color');\n\n\n\n//environment\nscene.background = new THREE.Color(0x000621);\n\n\n// Create a geometry for the upper half of the sphere\n//const sphereGeometry = new THREE.SphereGeometry(20, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2); // Upper half\nconst sphereGeometry = new THREE.SphereGeometry(3, 32,32)\nconst edges = new THREE.EdgesGeometry(sphereGeometry); // Get edges\n\n// Create a line material\nconst sphereMaterial = new THREE.LineBasicMaterial({ color: 0x213280 });\n\n// Create line segments and add them to the scene\nconst lineSegments = new THREE.LineSegments(edges, sphereMaterial);\nscene.add(lineSegments); \nconst sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n//scene.add(sphere);\n// Adding Fog (choose one of the two methods)\n//scene.fog = new THREE.Fog(0x0000ff, 1, 10); // Linear Fog\n scene.fog = new THREE.FogExp2(0x0000ff, 0.2); // Exponential Fog\n"],"file":"scripts.dev.js"}